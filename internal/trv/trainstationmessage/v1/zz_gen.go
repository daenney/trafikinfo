// Package v1 contains the type definitions for TrainStationMessage v1.
package v1

import (
	"time"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

type TrainStationMessage struct {
	// SV: Unikt id för varje meddelande
	// EN: Unique identifier
	Id *string `xml:"Id,omitempty"`
	// SV: Anger vilket presentationsmedia meddelandet gäller.<br /> 'Monitor'<br /> 'Plattformsskylt'<br /> 'Utrop'
	// EN: Type of media.<br /> 'Monitor' - Monitor<br /> 'Plattformsskylt'- Platform sign<br /> 'Utrop' - Announcement
	MediaType *string `xml:"MediaType,omitempty"`
	// SV: Stationens platssignatur
	// EN: Location code
	LocationCode *string `xml:"LocationCode,omitempty"`
	// SV: Trafikhändelsenummer från Basun
	// EN: Id in the BASUN application
	EventId *string `xml:"EventId,omitempty"`
	// SV: När meddelandet ska börja visas
	// EN: When the message should start to be displayed
	StartDateTime *time.Time `xml:"StartDateTime,omitempty"`
	// SV: När meddelandet ska sluta visas
	// EN: When the message should not be displayed anymore
	EndDateTime *time.Time `xml:"EndDateTime,omitempty"`
	// SV: Anger att ett meddelande bara skall gälla mellan tidpunkterna i Starttid och Sluttid, för varje dag i intervallet Starttid och Sluttid
	// EN: For the dates specified in Start and EndDateTime, specifies if the message should be displayed around the clock or just between the time set in Start and EndDateTime each day
	SplitActivationTime *bool `xml:"SplitActivationTime,omitempty"`
	// SV: Annonseringstexten
	// EN: Informational text
	FreeText *string `xml:"FreeText,omitempty"`
	// SV: Meddelandets viktighetsgrad
	// EN: How important the message are (in relative to other messages)
	Status *string `xml:"Status,omitempty"`
	// SV: Version på detta meddelande
	// EN: Versioning number for this external message
	VersionNumber *int `xml:"VersionNumber,omitempty"`
	// SV: En sträng som beskriver om ett meddelande ska vara aktivt (Y) eller inte (N) för varje dag från Starttid till Sluttid.
	// EN: A string with an 'Y' or 'N' for each day between the start and the end date. 'Y' if the message is to be active that day and 'N' otherwise.
	ActiveDays                   *string                       `xml:"ActiveDays,omitempty"`
	MonitorAttributes            *MonitorAttributes            `xml:"MonitorAttributes,omitempty"`
	PlatformSignAttributes       *PlatformSignAttributes       `xml:"PlatformSignAttributes,omitempty"`
	PublicAnnouncementAttributes *PublicAnnouncementAttributes `xml:"PublicAnnouncementAttributes,omitempty"`
	// SV: Anger att dataposten raderats
	// EN: Specifies if the element has been deleted
	Deleted *bool `xml:"Deleted,omitempty"`
	// SV: Tidpunkt då dataposten ändrades
	// EN: Time when the element wast last modified
	ModifiedTime *time.Time `xml:"ModifiedTime,omitempty"`
}

type MonitorAttributes struct {
	// SV: Anger om meddelandet skall visas på pendelmonitor.
	// EN: Specifies if the monitor is a commuter monitor or regular
	CommuterMonitor *bool `xml:"CommuterMonitor,omitempty"`
	// SV: Anger om monitormeddelandet även skall visas på stortavla.
	// EN: Specifies if the message is to be shown on a big screen monitor
	BigScreenMonitorActivated *bool `xml:"BigScreenMonitorActivated,omitempty"`
}

type PlatformSignAttributes struct {
	// SV: Anger om meddelandet skall visas på pendelplattformsskylt eller en vanlig plattformsskylt.
	// EN: Specifies if the message is to be shown on a commuter platform sign or regular platform sign
	CommuterPlatformSign *bool `xml:"CommuterPlatformSign,omitempty"`
	// SV: Vilka spår som meddelandet gäller
	// EN: The tracks that are affected by the message
	TrackList *TrackList `xml:"TrackList,omitempty"`
}

type PublicAnnouncementAttributes struct {
	// SV: Utropstext på engelska.
	// EN: Announcement text in English.
	EnglishText *string `xml:"EnglishText,omitempty"`
	// SV: Om Utropsystem ska ropa på engelska.
	// EN: Specifies if the message is announced in English.
	EnglishPublicAnnouncementActivated *bool `xml:"EnglishPublicAnnouncementActivated,omitempty"`
	// SV: En planering för vilka dagar och tidpunkter ett meddelande skall ropas.
	// EN: Plans for when the message is to be announced
	PublicAnnouncementPlanList *PublicAnnouncementPlanList `xml:"PublicAnnouncementPlanList,omitempty"`
	PublicAnnouncementZoneList *PublicAnnouncementZoneList `xml:"PublicAnnouncementZoneList,omitempty"`
}

type TrackList struct {
	Track []string `xml:"Track,omitempty"`
}

type PublicAnnouncementPlanList struct {
	PublicAnnouncementPlan []PublicAnnouncementPlan `xml:"PublicAnnouncementPlan,omitempty"`
}

type PublicAnnouncementZoneList struct {
	// SV: Anger en zon där meddelandet skall utropas
	// EN: Indicates a zone for where the message is to be announced
	PublicAnnouncementZone []string `xml:"PublicAnnouncementZone,omitempty"`
}

type PublicAnnouncementPlan struct {
	// SV: Planeringen är giltig efter denna tidpunkt och är första aktiva dagen i planeringen.
	// EN: The start and first valid date of the plan.
	ValidFrom *time.Time `xml:"ValidFrom,omitempty"`
	// SV: Planeringen är giltig fram till denna tidpunkt och är sista aktiva dagen i planeringen.
	// EN: The end and last valid date of the plan.
	ValidTo *time.Time `xml:"ValidTo,omitempty"`
	// SV: En sträng som beskriver om en planering är aktiv (Y) eller inte (N) för varje dag från Starttid till Sluttid.
	// EN: A string with an 'Y' or 'N' for each day between the start and the end date. 'Y' if the message is to be announced that day and 'N' otherwise.
	ActiveDays                     *string                         `xml:"ActiveDays,omitempty"`
	PublicAnnouncementOccasionList *PublicAnnouncementOccasionList `xml:"PublicAnnouncementOccasionList,omitempty"`
}

type PublicAnnouncementOccasionList struct {
	// SV: Anger vilken minut på dygnet ett utrop skall utföras
	// EN: Indicates which minute in the day the announcement is to be made
	PublicAnnouncementOccasion []int `xml:"PublicAnnouncementOccasion,omitempty"`
}
