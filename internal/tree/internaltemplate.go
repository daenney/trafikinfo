package tree

import (
	"fmt"
	"io"
	"strings"
)

const internalPreamble = `// Package %s contains the type definitions for %s v%s.
package %s

import (
	"time"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

`

func (r *Root) InternalTemplate(w io.Writer) {
	io.WriteString(w, fmt.Sprintf(
		internalPreamble,
		r.Meta.PackageVersion(),
		r.Meta.Name,
		r.Meta.Version,
		r.Meta.PackageVersion(),
	))

	for _, node := range r.Nodes {
		node.InternalRender(w)
	}
}

func (n *Node) InternalRenderAttr(w io.Writer) {
	io.WriteString(w, goName(n.Name))
	io.WriteString(w, " ")
	io.WriteString(w, "*")
	io.WriteString(w, n.Type.Kind)
	io.WriteString(w, " ")
	io.WriteString(w, tag(n)+"\n")
}

func (n *Node) InternalRenderField(w io.Writer) {
	io.WriteString(w, n.Name+" ")
	if n.Multiple {
		io.WriteString(w, "[]")
	} else {
		io.WriteString(w, "*")
	}
	io.WriteString(w, n.Type.Kind+" "+tag(n)+"\n")
}

func (n *Node) InternalRender(w io.Writer) {
	if len(n.Documentation) > 0 {
		io.WriteString(w, strings.Join(n.Documentation, "\n"))
		io.WriteString(w, "\n")
	}
	if n.Attr {
		n.InternalRenderAttr(w)
		return
	}

	if n.Type.Kind != "struct" {
		n.InternalRenderField(w)
		return
	}

	io.WriteString(w, "type "+n.Name+" "+"struct{\n")
	for _, nd := range n.Nodes {
		nd.InternalRender(w)
	}
	io.WriteString(w, "}\n\n")
}
