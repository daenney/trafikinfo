// Package v1 contains the type definitions for ReasonCode v1.
//
// All types have accessor methods to access fields which can be chained on nils.
// This makes it possible to easily drill down into deeply nested data.
package v1

import (
	"encoding/xml"
	"strings"
	"time"

	schema "code.dny.dev/trafikinfo/internal/trv/reasoncode/v1"
	"code.dny.dev/trafikinfo/trv"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

func ObjectType() trv.ObjectType {
	return trv.ObjectType{
		Kind:      "ReasonCode",
		Version:   "1",
		Namespace: "",
	}
}

type ReasonCode struct {
	data *schema.ReasonCode
}

func (x *ReasonCode) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.ReasonCode{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Full orsakskod, detta fält motsvarar det som finns från och med TrainAnnouncement version 1.5 under t.ex. Deviation.Code<br /> eller i objekttypen TrainMessage från och med schemaversion 1.5 under ReasonCode.Code
func (x *ReasonCode) Code() *string {
	return x.data.Code
}

// SV: Beskrivning för vilken grupp orsakskoden tillhör, t.ex Annonseringstexter och Orsaker nya principer
func (x *ReasonCode) GroupDescription() *string {
	return x.data.GroupDescription
}

// SV: Nivå 1 beskrivning, beskriver vilken typ av orsakskod.
func (x *ReasonCode) Level1Description() *string {
	return x.data.Level1Description
}

// SV: Nivå 2 beskrivning, beskriver vilken betydelse orsakskoden har, t.ex. Nationell
func (x *ReasonCode) Level2Description() *string {
	return x.data.Level2Description
}

// SV: Nivå 3 beskrivning, beskrivande text för orsakskoden, detta fält motsvarar det som finns i objekttypen TrainAnnouncement från och med schemaversion 1.5 under t.ex. Deviation.Description<br /> eller i objekttypen TrainMessage från och med schemaversion 1.5 under ReasonCode.Description
func (x *ReasonCode) Level3Description() *string {
	return x.data.Level3Description
}

// SV: Anger att dataposten raderats
func (x *ReasonCode) Deleted() *bool {
	return x.data.Deleted
}

// SV: Tidpunkt då dataposten ändrades
func (x *ReasonCode) ModifiedTime() *time.Time {
	return x.data.ModifiedTime
}

// Response can be used to decode the response from the API.
//
// For example:
//
//	package main
//
//	import (
//		 "encoding/xml"
//		 api "code.dny.dev/trafikinfo/trv/reasoncode/v1"
//	)
//
//	func main() {
//		var res api.Response
//		err := xml.Unmarshal(data, &res)
//	}
type Response struct {
	XMLName xml.Name `xml:"RESPONSE"`
	Results []struct {
		Info struct {
			LastModified trv.LastModified `xml:"LASTMODIFIED"`
			LastChangeID string           `xml:"LASTCHANGEID"`
			EvalResult   []any            `xml:"EVALRESULT"`
			SSEURL       string           `xml:"SSEURL"`
		} `xml:"INFO"`
		Error *trv.APIError `xml:"ERROR"`
		Data  []ReasonCode  `xml:"ReasonCode"`
	} `xml:"RESULT"`
}

// HasErrors returns whether any of the results
// includes an error.
func (r Response) HasErrors() bool {
	if len(r.Results) == 0 {
		return false
	}

	res := false
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = true
			break
		}
	}
	return res
}

// Errors returns a slice of [trv.Error], if any error was
// included in the response.
func (r Response) ErrorMsg() string {
	if !r.HasErrors() {
		return ""
	}

	res := []string{}
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = append(res, rr.Error.Error())
		}
	}
	return strings.Join(res, ", ")
}
