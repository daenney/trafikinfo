// Package v2 contains the type definitions for WeatherMeasurepoint v2.
//
// All types have accessor methods to access fields which can be chained on nils.
// This makes it possible to easily drill down into deeply nested data.
package v2

import (
	"encoding/xml"
	"strings"
	"time"

	schema "code.dny.dev/trafikinfo/internal/trv/weathermeasurepoint/v2"
	"code.dny.dev/trafikinfo/trv"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

func ObjectType() trv.ObjectType {
	return trv.ObjectType{
		Kind:      "WeatherMeasurepoint",
		Version:   "2",
		Namespace: "",
	}
}

type PrecipTypeMeasure string

const (
	PrecipTypeMeasureNo           PrecipTypeMeasure = "no"
	PrecipTypeMeasureRain         PrecipTypeMeasure = "rain"
	PrecipTypeMeasureFreezingRain PrecipTypeMeasure = "freezing_rain"
	PrecipTypeMeasureSnow         PrecipTypeMeasure = "snow"
	PrecipTypeMeasureSleet        PrecipTypeMeasure = "sleet"
	PrecipTypeMeasureYes          PrecipTypeMeasure = "yes"
)

// SV: Vindsensorns höjdplacering [m]
type WindSensorHeight int

const (
	WindSensorHeight6  WindSensorHeight = 6
	WindSensorHeight10 WindSensorHeight = 10
)

type WeatherMeasurepoint struct {
	data *schema.WeatherMeasurepoint
}

func (x *WeatherMeasurepoint) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.WeatherMeasurepoint{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Unik identitet för en mätpunkt
func (x *WeatherMeasurepoint) ID() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Id
}

// SV: Mätpunktens namn
func (x *WeatherMeasurepoint) Name() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Name
}

func (x *WeatherMeasurepoint) Geometry() *Geometry {
	if x.data == nil {
		return &Geometry{}
	}
	return &Geometry{data: x.data.Geometry}
}

func (x *WeatherMeasurepoint) Observation() *Observation {
	if x.data == nil {
		return &Observation{}
	}
	return &Observation{data: x.data.Observation}
}

// SV: Tidpunkt då dataposten ändrades i cachen
// EN: Time when the data item was changed in the cache
func (x *WeatherMeasurepoint) ModifiedTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.ModifiedTime
}

// SV: Anger att dataposten raderats
// EN: Indicates that the data record has been deleted
func (x *WeatherMeasurepoint) Deleted() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Deleted
}

type Geometry struct {
	data *schema.Geometry
}

func (x *Geometry) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Geometry{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Geometrisk punkt som observationen avser i koordinatsystem SWEREF99TM
func (x *Geometry) SWEREF99TM() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SWEREF99TM
}

// SV: Geometrisk punkt som observationen avser i koordinatsystem WGS84
func (x *Geometry) WGS84() *string {
	if x.data == nil {
		return nil
	}
	return x.data.WGS84
}

type Observation struct {
	data *schema.Observation
}

func (x *Observation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Observation{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Tidpunkt som observationen avser, inklusive tidzon för att hantera sommartid och normaltid.
func (x *Observation) Sample() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.Sample
}

func (x *Observation) Weather() *Weather {
	if x.data == nil {
		return &Weather{}
	}
	return &Weather{data: x.data.Weather}
}

func (x *Observation) Surface() *SurfaceCondition {
	if x.data == nil {
		return &SurfaceCondition{}
	}
	return &SurfaceCondition{data: x.data.Surface}
}

func (x *Observation) Air() *AirCondition {
	if x.data == nil {
		return &AirCondition{}
	}
	return &AirCondition{data: x.data.Air}
}

func (x *Observation) Wind() []WindCondition {
	if len(x.data.Wind) == 0 {
		return nil
	}
	data := []WindCondition{}
	for _, mem := range x.data.Wind {
		data = append(data, WindCondition{data: &mem})
	}
	return data
}

func (x *Observation) DeicingChemical() *DeicingChemical {
	if x.data == nil {
		return &DeicingChemical{}
	}
	return &DeicingChemical{data: x.data.DeicingChemical}
}

func (x *Observation) Subsurface() *SubsurfaceCondition {
	if x.data == nil {
		return &SubsurfaceCondition{}
	}
	return &SubsurfaceCondition{data: x.data.Subsurface}
}

func (x *Observation) Aggregated5minutes() *Aggregated {
	if x.data == nil {
		return &Aggregated{}
	}
	return &Aggregated{data: x.data.Aggregated5minutes}
}

func (x *Observation) Aggregated10minutes() *Aggregated {
	if x.data == nil {
		return &Aggregated{}
	}
	return &Aggregated{data: x.data.Aggregated10minutes}
}

func (x *Observation) Aggregated30minutes() *Aggregated {
	if x.data == nil {
		return &Aggregated{}
	}
	return &Aggregated{data: x.data.Aggregated30minutes}
}

// SV: Unik publiceringsidentitet för observationen.
func (x *Observation) ID() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Id
}

type Weather struct {
	data *schema.Weather
}

func (x *Weather) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Weather{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Vilken typ av nederbörd som detekterats
func (x *Weather) Precipitation() *PrecipTypeMeasure {
	if x.data == nil {
		return nil
	}
	return (*PrecipTypeMeasure)(x.data.Precipitation)
}

type SurfaceCondition struct {
	data *schema.SurfaceCondition
}

func (x *SurfaceCondition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.SurfaceCondition{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Vägytans temperatur. Value [C]
func (x *SurfaceCondition) Temperature() *Celsius {
	if x.data == nil {
		return &Celsius{}
	}
	return &Celsius{data: x.data.Temperature}
}

// SV: Förekomst av vatten på vägytan.
func (x *SurfaceCondition) Water() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Water
}

// SV: Förekomst av is på vägytan.
func (x *SurfaceCondition) Ice() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Ice
}

// SV: Förekomst av snö på vägytan.
func (x *SurfaceCondition) Snow() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Snow
}

// SV: Value [0-1]
func (x *SurfaceCondition) Grip() *Grip {
	if x.data == nil {
		return &Grip{}
	}
	return &Grip{data: x.data.Grip}
}

// SV: Vattendjup på vägytan. Value [mm]
func (x *SurfaceCondition) WaterDepth() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.WaterDepth}
}

// SV: Isdjup på vägytan. Value [mm]
func (x *SurfaceCondition) IceDepth() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.IceDepth}
}

// SV: Snödjup på vägytan.
func (x *SurfaceCondition) SnowDepth() *Snow {
	if x.data == nil {
		return &Snow{}
	}
	return &Snow{data: x.data.SnowDepth}
}

type AirCondition struct {
	data *schema.AirCondition
}

func (x *AirCondition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.AirCondition{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Lufttemperatur. Value [C]
func (x *AirCondition) Temperature() *Celsius {
	if x.data == nil {
		return &Celsius{}
	}
	return &Celsius{data: x.data.Temperature}
}

// SV: Daggpunkt, den temperatur där vatten kondenserar. Value [C]
func (x *AirCondition) Dewpoint() *Celsius {
	if x.data == nil {
		return &Celsius{}
	}
	return &Celsius{data: x.data.Dewpoint}
}

// SV: Relativ luftfuktighet. Andel av den fukt som luften kan bära. Vid 100% är luften mättad. Value [%]
func (x *AirCondition) RelativeHumidity() *Percentage {
	if x.data == nil {
		return &Percentage{}
	}
	return &Percentage{data: x.data.RelativeHumidity}
}

// SV: Den sträcka det finns sikt. Value [m]
func (x *AirCondition) VisibleDistance() *Meters {
	if x.data == nil {
		return &Meters{}
	}
	return &Meters{data: x.data.VisibleDistance}
}

// SV: Förekomst av tillräckligt klart väder för att vara av vikt för vägytans temperatur.
func (x *AirCondition) CloudFree() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.CloudFree
}

type WindCondition struct {
	data *schema.WindCondition
}

func (x *WindCondition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.WindCondition{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

func (x *WindCondition) Height() *WindSensorHeight {
	if x.data == nil {
		return nil
	}
	return (*WindSensorHeight)(x.data.Height)
}

// SV: Mått på vindhastighet vid en viss tidpunkt. Medelvärde över tiominutersperiod t.o.m. tidpunkten. Value [m/s]
func (x *WindCondition) Speed() *MetersPerSecond {
	if x.data == nil {
		return &MetersPerSecond{}
	}
	return &MetersPerSecond{data: x.data.Speed}
}

// SV: Mått på vindriktning vid en viss tidpunkt. Medelvärde över tiominutersperiod t.o.m. tidpunkten. Value [grader]
func (x *WindCondition) Direction() *Degrees {
	if x.data == nil {
		return &Degrees{}
	}
	return &Degrees{data: x.data.Direction}
}

type DeicingChemical struct {
	data *schema.DeicingChemical
}

func (x *DeicingChemical) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.DeicingChemical{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mängd salt vid mätpunkten. Value [g/kvm]
func (x *DeicingChemical) Amount() *GramPerSquareMeter {
	if x.data == nil {
		return &GramPerSquareMeter{}
	}
	return &GramPerSquareMeter{data: x.data.Amount}
}

type SubsurfaceCondition struct {
	data *schema.SubsurfaceCondition
}

func (x *SubsurfaceCondition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.SubsurfaceCondition{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

func (x *SubsurfaceCondition) Ground() []GroundCondition {
	if len(x.data.Ground) == 0 {
		return nil
	}
	data := []GroundCondition{}
	for _, mem := range x.data.Ground {
		data = append(data, GroundCondition{data: &mem})
	}
	return data
}

type Celsius struct {
	data *schema.Celsius
}

func (x *Celsius) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Celsius{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Celsius) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Celsius) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Celsius) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Grip struct {
	data *schema.Grip
}

func (x *Grip) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Grip{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Grip) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Grip) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Grip) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Millimeters struct {
	data *schema.Millimeters
}

func (x *Millimeters) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Millimeters{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Millimeters) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Millimeters) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Millimeters) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Snow struct {
	data *schema.Snow
}

func (x *Snow) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Snow{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mängd snö. Value [mm]
func (x *Snow) Solid() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.Solid}
}

// SV: Mängd vatten som snön motsvarar i smält form. Value [mm]
func (x *Snow) WaterEquivalent() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.WaterEquivalent}
}

type Percentage struct {
	data *schema.Percentage
}

func (x *Percentage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Percentage{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Percentage) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Percentage) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Percentage) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Meters struct {
	data *schema.Meters
}

func (x *Meters) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Meters{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Meters) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Meters) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Meters) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type MetersPerSecond struct {
	data *schema.MetersPerSecond
}

func (x *MetersPerSecond) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.MetersPerSecond{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *MetersPerSecond) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *MetersPerSecond) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *MetersPerSecond) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Degrees struct {
	data *schema.Degrees
}

func (x *Degrees) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Degrees{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *Degrees) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *Degrees) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *Degrees) Value() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type GramPerSquareMeter struct {
	data *schema.GramPerSquareMeter
}

func (x *GramPerSquareMeter) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.GramPerSquareMeter{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *GramPerSquareMeter) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *GramPerSquareMeter) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *GramPerSquareMeter) Value() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type GroundCondition struct {
	data *schema.GroundCondition
}

func (x *GroundCondition) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.GroundCondition{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Det djup som observationen avser och är negativt för att återspegla att det avser under markytan. Value [cm]
func (x *GroundCondition) Depth() *IntegerCentimeters {
	if x.data == nil {
		return &IntegerCentimeters{}
	}
	return &IntegerCentimeters{data: x.data.Depth}
}

// SV: Temperatur (grader celsius) vid ett visst djup i marken. Value [C]
func (x *GroundCondition) Temperature() *Celsius {
	if x.data == nil {
		return &Celsius{}
	}
	return &Celsius{data: x.data.Temperature}
}

type Aggregated struct {
	data *schema.Aggregated
}

func (x *Aggregated) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Aggregated{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

func (x *Aggregated) Wind() *WindConditionAggregated {
	if x.data == nil {
		return &WindConditionAggregated{}
	}
	return &WindConditionAggregated{data: x.data.Wind}
}

func (x *Aggregated) Precipitation() *PrecipitationConditionAggregated {
	if x.data == nil {
		return &PrecipitationConditionAggregated{}
	}
	return &PrecipitationConditionAggregated{data: x.data.Precipitation}
}

// SV: Mätvärdets ursprung
type Origin string

const (
	OriginCalculated Origin = "calculated"
	OriginMeasured   Origin = "measured"
	OriginEstimated  Origin = "estimated"
)

type IntegerCentimeters struct {
	data *schema.IntegerCentimeters
}

func (x *IntegerCentimeters) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.IntegerCentimeters{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätvärdets ursprung
func (x *IntegerCentimeters) Origin() *Origin {
	if x.data == nil {
		return nil
	}
	return (*Origin)(x.data.Origin)
}

// SV: Sensorernas beteckning
func (x *IntegerCentimeters) SensorNames() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SensorNames
}

func (x *IntegerCentimeters) Value() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type WindConditionAggregated struct {
	data *schema.WindConditionAggregated
}

func (x *WindConditionAggregated) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.WindConditionAggregated{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

func (x *WindConditionAggregated) Height() *WindSensorHeight {
	if x.data == nil {
		return nil
	}
	return (*WindSensorHeight)(x.data.Height)
}

// SV: Högst uppmätt 3-sekundersmedelvärde under perioden. Value [m/s]
func (x *WindConditionAggregated) SpeedMax() *MetersPerSecond {
	if x.data == nil {
		return &MetersPerSecond{}
	}
	return &MetersPerSecond{data: x.data.SpeedMax}
}

// SV: Value [m/s]
func (x *WindConditionAggregated) SpeedAverage() *MetersPerSecond {
	if x.data == nil {
		return &MetersPerSecond{}
	}
	return &MetersPerSecond{data: x.data.SpeedAverage}
}

type PrecipitationConditionAggregated struct {
	data *schema.PrecipitationConditionAggregated
}

func (x *PrecipitationConditionAggregated) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.PrecipitationConditionAggregated{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Förekomst av regn.
func (x *PrecipitationConditionAggregated) Rain() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Rain
}

// SV: Förekomst av snö.
func (x *PrecipitationConditionAggregated) Snow() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Snow
}

// SV: Mängd regn under perioden. Value [mm]
func (x *PrecipitationConditionAggregated) RainSum() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.RainSum}
}

// SV: Mängd snö under perioden.
func (x *PrecipitationConditionAggregated) SnowSum() *Snow {
	if x.data == nil {
		return &Snow{}
	}
	return &Snow{data: x.data.SnowSum}
}

// SV: Mängd vatten som nederbörden under perioden motsvarar. Value [mm]
func (x *PrecipitationConditionAggregated) TotalWaterEquivalent() *Millimeters {
	if x.data == nil {
		return &Millimeters{}
	}
	return &Millimeters{data: x.data.TotalWaterEquivalent}
}

// Response can be used to decode the response from the API.
//
// For example:
//
//	package main
//
//	import (
//		 "encoding/xml"
//		 api "code.dny.dev/trafikinfo/trv/weathermeasurepoint/v2"
//	)
//
//	func main() {
//		var res api.Response
//		err := xml.Unmarshal(data, &res)
//	}
type Response struct {
	XMLName xml.Name `xml:"RESPONSE"`
	Results []struct {
		Info struct {
			LastModified trv.LastModified `xml:"LASTMODIFIED"`
			LastChangeID string           `xml:"LASTCHANGEID"`
			EvalResult   []any            `xml:"EVALRESULT"`
			SSEURL       string           `xml:"SSEURL"`
		} `xml:"INFO"`
		Error *trv.APIError         `xml:"ERROR"`
		Data  []WeatherMeasurepoint `xml:"WeatherMeasurepoint"`
	} `xml:"RESULT"`
}

// HasErrors returns whether any of the results
// includes an error.
func (r Response) HasErrors() bool {
	if len(r.Results) == 0 {
		return false
	}

	res := false
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = true
			break
		}
	}
	return res
}

// Errors returns a slice of [trv.Error], if any error was
// included in the response.
func (r Response) ErrorMsg() string {
	if !r.HasErrors() {
		return ""
	}

	res := []string{}
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = append(res, rr.Error.Error())
		}
	}
	return strings.Join(res, ", ")
}
